# -*- coding: utf-8 -*-
"""FinPinecone.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Az3IvIMz5pSWGwqnoBg2rB7zEgQJcrRR
"""

# !pip install pinecone-client
# !pip install sentence-transformers
# !pip install pinecone-client sentence-transformers
# import os


# 패키지 임포트
import json
import os
from pinecone import Pinecone, ServerlessSpec
from sentence_transformers import SentenceTransformer

# Pinecone 초기화 (API 키 입력)
embedding_model = SentenceTransformer('upskyy/bge-m3-korean')

# Pinecone 인스턴스 생성
pc = Pinecone(
    api_key="b16c94ef-1e4b-4970-96c3-c2bd5e34447b"  # Pinecone API 키
)

# 인덱스 이름을 소문자 및 하이픈(-)으로만 구성
index_name = "companyinfo2"

# Pinecone 인덱스 생성 (이미 존재하는 경우 생략 가능)
if index_name not in pc.list_indexes().names():
    pc.create_index(
        name=index_name,
        dimension=1024,  # 차원은 임베딩 차원에 맞춰 설정
        metric='cosine',  # 거리 측정 방법 설정
        spec=ServerlessSpec(
            cloud='aws',  # 사용할 클라우드 제공자
            region='us-east-1'  # 사용할 리전
        )
    )

#     # 인덱스가 존재하는 경우 제거(데이터 재 업로드를 위해)
# if index_name in pc.list_indexes().names():
#     pc.delete_index(index_name)  # 인덱스 삭제


index = pc.Index(index_name)

# 2. 데이터 로드 및 삽입 함수
def load_and_insert_data(file_path: str):
    with open(file_path, 'r') as file:
        company_data = json.load(file)

    for company, details in company_data.items():
        # 기본 기업 정보
        설립일 = details.get('설립일', '')
        업종 = details.get('업종', '')
        사업내용 = details.get('사업내용', '')
        평균연봉 = details.get('평균연봉', '')
        주소 = details.get('주소', '')
        url = details.get('url', '')

        doc_text = (
            f"{company} | 설립일: {설립일} | 업종: {업종} | "
            f"사업내용: {사업내용} | 평균연봉: {평균연봉} | "
            f"주소: {주소} | URL: {url}"
        )

        # 복리후생 정보 추가
        if "복리후생" in details:
            복리후생 = details["복리후생"]
            if isinstance(복리후생, dict):  # 복리후생이 사전인 경우
                for category, benefits in 복리후생.items():
                    if benefits:  # benefits가 비어있지 않은 경우
                        doc_text += f" | {category}: {', '.join(benefits)}"
                    else:
                        doc_text += f" | {category}: "  # 비어있는 경우 공백 추가
            else:  # 복리후생이 문자열인 경우
                doc_text += f" | 복리후생: {복리후생}"

        # 채용정보 추가
        if details.get("채용정보"):
            for job in details["채용정보"]:
                job_info = (
                    f" | 채용정보: {job.get('제목', '')}, "
                    f"분야: {', '.join(job.get('분야', []))}, "
                    f"근무지: {job.get('근무지', '')}, "
                    f"경력: {job.get('경력', '')}, "
                    f"학력: {job.get('학력', '')}, "
                    f"마감일: {job.get('마감일', '')}, "
                    f"링크: {job.get('링크', '')}"
                )
                doc_text += job_info
        else:
            doc_text += " | 채용정보: "  # 채용정보가 없을 경우 공백 추가

        # 임베딩 생성
        embedding = embedding_model.encode(doc_text).tolist()

        # Pinecone에 추가
        index.upsert(
            vectors=[
                (details["id"], embedding, {
                    "company_name": company,
                    "업종": 업종,
                    "설립일": 설립일,
                    "평균연봉": 평균연봉,
                    "주소": 주소,
                    "url": url,
                    "document": doc_text
                })
            ]
        )

# 데이터 로드 및 삽입 호출
#load_and_insert_data('company3.json')
# 4. 쿼리 실행
query_text = "평균연봉이 3000만원 언저리인 회사"  # 예시 질문
query_embedding = embedding_model.encode(query_text).tolist()  # 쿼리 임베딩 생성

# Pinecone에서 유사한 항목 검색
results = index.query(
    vector=query_embedding,  # 쿼리 임베딩 사용
    top_k=5,  # 반환할 결과 수
    include_metadata=True  # 메타데이터 포함 여부
)

# 결과 출력
def print_results(results):
    for result in results['matches']:
        print(f"ID: {result['id']}, 회사명: {result['metadata'].get('company_name')}, 유사도 점수: {result['score']}")
        print(f"내용: {result['metadata'].get('document')}")
        print("-" * 50)

print("결과:")
print_results(results)